{"version":3,"file":"static/js/826.fb9d0074.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Button/Button.module.css?ce6f","components/Button/Button.js","webpack://react-homework-template/./src/components/TaskForm/TaskForm.module.css?c90e","components/TaskForm/TaskForm.js","webpack://react-homework-template/./src/components/Task/Task.module.css?22e8","components/Task/Task.js","components/TaskList/TaskList.module.css","redux/tasks/selectors.js","components/TaskList/TaskList.js","Pages/Tasks.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__RBtNK\",\"isSelected\":\"Button_isSelected__-6JYv\"};","import clsx from \"clsx\";\nimport css from \"./Button.module.css\";\n\nexport const Button = ({\n  selected = false,\n  type = \"button\",\n  children,\n  ...otherProps\n}) => {\n  return (\n    <button\n      className={clsx(css.btn, {\n        [css.isSelected]: selected\n      })}\n      type={type}\n      {...otherProps}\n    >\n      {children}\n    </button>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"TaskForm_form__LZ0D1\",\"field\":\"TaskForm_field__3Hftx\"};","import { Button } from \"components/Button/Button\";\nimport css from \"./TaskForm.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { addTasks } from \"redux/tasks/operations\";\n\nexport const TaskForm = () => {\n  const dispatch = useDispatch()\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const form = event.target;\n    if (form.elements.text.value !== '') {\n      dispatch(addTasks(form.elements.text.value))\n      form.reset();\n      return;\n    }\n    alert('Task cannot be empty. Enter some text!');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <input\n        className={css.field}\n        type=\"text\"\n        name=\"text\"\n        placeholder=\"Enter task text...\"\n      />\n      <Button type=\"submit\">Add task</Button>\n    </form>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Task_wrapper__zvx3s\",\"text\":\"Task_text__IwwM2\",\"btn\":\"Task_btn__5Zeie\",\"checkbox\":\"Task_checkbox__XsrPA\"};","import { MdClose } from \"react-icons/md\";\nimport css from \"./Task.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteTask, toggleCompleted } from \"redux/tasks/operations\";\n\nexport const Task = ({ task }) => {\n\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteTask(task.id));\n  const handleToggle = () => dispatch(toggleCompleted(task));\n\n  return (\n    <div className={css.wrapper}>\n      <input\n        type=\"checkbox\"\n        className={css.checkbox}\n        checked={task.completed}\n        onChange={handleToggle}\n      />\n      <p className={css.text}>{task.text}</p>\n      <button className={css.btn} onClick={handleDelete}>\n        <MdClose size={24} />\n      </button>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {};","import { createSelector } from \"@reduxjs/toolkit\";\nimport { statusFilters } from \"../constants\";\n\nexport const selectTasks = state => state.tasks.items;\n\nexport const selectIsLoading = state => state.tasks.isLoading;\n\nexport const selectError = state => state.tasks.error;\n\nexport const selectStatusFilter = state => state.filters.status;\n\nexport const selectVisibleTasks = createSelector([selectTasks, selectStatusFilter], (tasks, statusFilter) => {\n    \n    switch (statusFilter) {\n        case statusFilters.active:\n            return tasks.filter(task => !task.completed);\n        case statusFilters.completed:\n            return tasks.filter(task => task.completed);\n        default:\n            return tasks;\n    }\n});\n\nexport const selectCount = createSelector([selectTasks], tasks => {\n    return tasks.reduce(\n        (acc, task) => {\n            if (task.completed) {\n                acc.completed += 1;\n            } else {\n                acc.active += 1;\n            }\n            return acc;\n        }, { active: 0, completed: 0 })\n});\n","import { Task } from \"components/Task/Task\";\nimport css from \"./TaskList.module.css\";\nimport { useSelector } from \"react-redux\";\nimport {selectVisibleTasks } from \"redux/tasks/selectors\";\n\n\n\nexport const TaskList = () => {\n  const visibleTasks = useSelector(selectVisibleTasks);\n\n  return (\n    <ul className={css.list}>\n      {visibleTasks.map(task => (\n        <li className={css.listItem} key={task.id}>\n          <Task task={task} id={task.id}/>\n        </li>\n      ))}\n    </ul>\n  );\n};","import { TaskForm } from \"components/TaskForm/TaskForm\";\nimport { TaskList } from \"components/TaskList/TaskList\";\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchTasks } from \"redux/tasks/operations\";\nimport { selectIsLoading } from \"redux/tasks/selectors\";\n\n\nexport default function Tasks() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n\n    useEffect(()=>{dispatch(fetchTasks())},[dispatch])\n    return (\n        <>\n            <Helmet>\n                <title>Your tasks</title>\n            </Helmet>\n            <TaskForm />\n            <div>{isLoading && 'Request in progress...'}</div>\n            <TaskList/>\n        </>\n    )\n}\n\n"],"names":["Button","_ref","_ref$selected","selected","_ref$type","type","children","otherProps","_objectWithoutProperties","_excluded","_jsx","_objectSpread","className","clsx","css","_defineProperty","TaskForm","dispatch","useDispatch","_jsxs","onSubmit","event","preventDefault","form","target","elements","text","value","addTasks","reset","alert","name","placeholder","Task","task","checked","completed","onChange","toggleCompleted","onClick","deleteTask","id","MdClose","size","selectTasks","state","tasks","items","selectIsLoading","isLoading","selectVisibleTasks","createSelector","filters","status","statusFilter","statusFilters","filter","TaskList","reduce","acc","active","visibleTasks","useSelector","map","Tasks","useEffect","fetchTasks","_Fragment","Helmet"],"sourceRoot":""}